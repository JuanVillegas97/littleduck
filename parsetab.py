
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'COLON COMMA CTEF CTEI CTESTRING DIFF DIVIDE ELSE EQUALS FLOAT GREATER ID IF INT LEFTBRACKET LEFTPAREN LESSER MINUS MULTIPLY PLUS PRINT PROGRAM RIGHTBRACKET RIGHTPAREN SEMICOLON VAR\n    empty :\n    \n    expression : exp comparation\n    var_cte : ID\n    | CTEI\n    | CTEF\n    program : PROGRAM ID SEMICOLON program_vars block\n    program_vars : vars\n    | empty\n    \n    block : LEFTBRACKET statement_block RIGHTBRACKET\n    \n    statement_block : statement statement_block\n    | empty\n    statement : assignment\n    | condition\n    | writing\n    comparation : GREATER comparation_exp\n    | LESSER comparation_exp\n    | DIFF comparation_exp\n    | empty\n    \n    comparation_exp : exp\n    \n    exp : term operator\n    \n    operator : PLUS term operator\n    | MINUS term operator\n    | empty\n    \n    term : factor term_operator\n    \n    term_operator : MULTIPLY factor term_operator\n    | DIVIDE factor term_operator\n    | empty\n    \n    factor : LEFTPAREN expression RIGHTPAREN\n    | sign var_cte\n    \n    sign : PLUS\n    | MINUS\n    | empty\n    \n    vars : VAR var_id COLON type SEMICOLON vars_block\n    \n    var_id : ID var_id_2\n    \n    var_id_2 : COMMA ID var_id_2\n    | empty\n    \n    type : INT\n    | FLOAT\n    \n    vars_block : var_id COLON type SEMICOLON vars_block\n    | empty\n    \n    assignment : ID EQUALS expression SEMICOLON\n    \n    condition : IF LEFTPAREN expression RIGHTPAREN block else_condition SEMICOLON\n    \n    else_condition : ELSE block\n    | empty\n    \n    writing : PRINT LEFTPAREN print_val RIGHTPAREN SEMICOLON\n    \n    print_val : expression print_exp\n    | CTESTRING print_exp\n    \n    print_exp : COMMA  print_val\n    | empty\n    '
    
_lr_action_items = {'$end':([0,1,],[-1,0,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'empty':([0,],[1,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> empty","S'",1,None,None,None),
  ('empty -> <empty>','empty',0,'p_empty','littleDuck.py',89),
  ('expression -> exp comparation','expression',2,'p_expression','littleDuck.py',94),
  ('var_cte -> ID','var_cte',1,'p_var_cte','littleDuck.py',97),
  ('var_cte -> CTEI','var_cte',1,'p_var_cte','littleDuck.py',98),
  ('var_cte -> CTEF','var_cte',1,'p_var_cte','littleDuck.py',99),
  ('program -> PROGRAM ID SEMICOLON program_vars block','program',5,'p_program','littleDuck.py',102),
  ('program_vars -> vars','program_vars',1,'p_program_vars','littleDuck.py',106),
  ('program_vars -> empty','program_vars',1,'p_program_vars','littleDuck.py',107),
  ('block -> LEFTBRACKET statement_block RIGHTBRACKET','block',3,'p_block','littleDuck.py',111),
  ('statement_block -> statement statement_block','statement_block',2,'p_statement_block','littleDuck.py',115),
  ('statement_block -> empty','statement_block',1,'p_statement_block','littleDuck.py',116),
  ('statement -> assignment','statement',1,'p_statement','littleDuck.py',119),
  ('statement -> condition','statement',1,'p_statement','littleDuck.py',120),
  ('statement -> writing','statement',1,'p_statement','littleDuck.py',121),
  ('comparation -> GREATER comparation_exp','comparation',2,'p_comparation','littleDuck.py',125),
  ('comparation -> LESSER comparation_exp','comparation',2,'p_comparation','littleDuck.py',126),
  ('comparation -> DIFF comparation_exp','comparation',2,'p_comparation','littleDuck.py',127),
  ('comparation -> empty','comparation',1,'p_comparation','littleDuck.py',128),
  ('comparation_exp -> exp','comparation_exp',1,'p_comparation_exp','littleDuck.py',132),
  ('exp -> term operator','exp',2,'p_exp','littleDuck.py',136),
  ('operator -> PLUS term operator','operator',3,'p_operator','littleDuck.py',140),
  ('operator -> MINUS term operator','operator',3,'p_operator','littleDuck.py',141),
  ('operator -> empty','operator',1,'p_operator','littleDuck.py',142),
  ('term -> factor term_operator','term',2,'p_term','littleDuck.py',146),
  ('term_operator -> MULTIPLY factor term_operator','term_operator',3,'p_term_operator','littleDuck.py',150),
  ('term_operator -> DIVIDE factor term_operator','term_operator',3,'p_term_operator','littleDuck.py',151),
  ('term_operator -> empty','term_operator',1,'p_term_operator','littleDuck.py',152),
  ('factor -> LEFTPAREN expression RIGHTPAREN','factor',3,'p_factor','littleDuck.py',156),
  ('factor -> sign var_cte','factor',2,'p_factor','littleDuck.py',157),
  ('sign -> PLUS','sign',1,'p_sing','littleDuck.py',161),
  ('sign -> MINUS','sign',1,'p_sing','littleDuck.py',162),
  ('sign -> empty','sign',1,'p_sing','littleDuck.py',163),
  ('vars -> VAR var_id COLON type SEMICOLON vars_block','vars',6,'p_vars','littleDuck.py',167),
  ('var_id -> ID var_id_2','var_id',2,'p_var_id','littleDuck.py',171),
  ('var_id_2 -> COMMA ID var_id_2','var_id_2',3,'p_var_id_2','littleDuck.py',175),
  ('var_id_2 -> empty','var_id_2',1,'p_var_id_2','littleDuck.py',176),
  ('type -> INT','type',1,'p_type','littleDuck.py',180),
  ('type -> FLOAT','type',1,'p_type','littleDuck.py',181),
  ('vars_block -> var_id COLON type SEMICOLON vars_block','vars_block',5,'p_vars_block','littleDuck.py',185),
  ('vars_block -> empty','vars_block',1,'p_vars_block','littleDuck.py',186),
  ('assignment -> ID EQUALS expression SEMICOLON','assignment',4,'p_assignment','littleDuck.py',190),
  ('condition -> IF LEFTPAREN expression RIGHTPAREN block else_condition SEMICOLON','condition',7,'p_condition','littleDuck.py',194),
  ('else_condition -> ELSE block','else_condition',2,'p_else_condition','littleDuck.py',198),
  ('else_condition -> empty','else_condition',1,'p_else_condition','littleDuck.py',199),
  ('writing -> PRINT LEFTPAREN print_val RIGHTPAREN SEMICOLON','writing',5,'p_writing','littleDuck.py',203),
  ('print_val -> expression print_exp','print_val',2,'p_print_val','littleDuck.py',207),
  ('print_val -> CTESTRING print_exp','print_val',2,'p_print_val','littleDuck.py',208),
  ('print_exp -> COMMA print_val','print_exp',2,'p_print_exp','littleDuck.py',212),
  ('print_exp -> empty','print_exp',1,'p_print_exp','littleDuck.py',213),
]
